"""
Django settings for map project.

Generated by 'django-admin startproject' using Django 5.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""
import os
import logging
from pathlib import Path
from dotenv import load_dotenv
from logging.handlers import RotatingFileHandler

max_log_file_size = 512 * 1024 * 1024  # 512 MB

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

logs_path = os.path.join(BASE_DIR, 'logs')
if not os.path.exists(logs_path):
    os.makedirs(logs_path)
env_path = os.path.join(BASE_DIR, ".env")

log_file_path = os.path.join(logs_path, 'settings.log')
handler = RotatingFileHandler(log_file_path, maxBytes=max_log_file_size, backupCount=5)
# Configure logging
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[handler]
)

# Start logging application initialization
logging.info("Initializing Django application settings in the map/settings.py file.")

# Load environment variables
try:
    load_dotenv(dotenv_path=env_path)
    db_username = os.getenv("db_username")
    db_password = os.getenv("db_password")
    db_host = os.getenv("db_host")
    db_port = os.getenv("db_port")
    SECRET_KEY = os.getenv("SECRET_KEY")
    logging.info("Environment variables loaded successfully")
except Exception as e:
    logging.error("Error loading environment variables: %s", e)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'mmm'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'mmm.middleware.AutoLoginMiddleware'
]

ROOT_URLCONF = 'map.urls'

GDAL_LIBRARY_PATH = r"C:\AMIR\Python\NMFD\venv\Lib\site-packages\osgeo\gdal304.dll"

GEOS_LIBRARY_PATH = r"C:\AMIR\Python\NMFD\venv\Lib\site-packages\osgeo\geos_c.dll"

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'mmm/templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'map.wsgi.application'

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_HOST_USER = os.getenv('email')
EMAIL_HOST_PASSWORD = os.getenv('password')
EMAIL_USE_TLS = True
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER

# Log database configuration
try:
    DATABASES = {
        'default': {
            'ENGINE': 'django.contrib.gis.db.backends.postgis',
            'NAME': 'mmm_map',
            'USER': f'{db_username}',
            'PASSWORD': f'{db_password}',
            'HOST': f'{db_host}',
            'PORT': f'{db_port}',
            'OPTIONS': {
                'options': '-c search_path=data'
            }
        }
    }
    logging.info("Database configuration loaded successfully.")
    logging.debug(f"Database host: {db_host}, port: {db_port}")
except Exception as e:
    logging.critical("Error configuring database: %s", e)
    raise

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

STATIC_URL = 'static/'

# Add this line to define where collected static files will be stored
STATIC_ROOT = os.path.join(BASE_DIR, 'mmm/static')

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
